/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.12
 */

#include "sipAPIqmotorstack.h"

#line 11 "qmotorstack.sip"
  #include "qmotorstack.h"
#line 12 "./sipqmotorstackQMotorStack.cpp"

#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "./sipqmotorstackQMotorStack.cpp"
#line 28 "/usr/share/sip/PyQt5/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 19 "./sipqmotorstackQMotorStack.cpp"
#line 36 "/usr/share/sip/PyQt5/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 22 "./sipqmotorstackQMotorStack.cpp"
#line 12 "../qcamotorgui_py/qcamotorgui.sip"
#include "qcamotorgui.h"
#line 25 "./sipqmotorstackQMotorStack.cpp"
#line 12 "../qcamotor_py/qcamotor.sip"
#include "qcamotor.h"
#line 28 "./sipqmotorstackQMotorStack.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 31 "./sipqmotorstackQMotorStack.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 34 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 37 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qicon.sip"
#include <qicon.h>
#line 40 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qpainter.sip"
#include <qpainter.h>
#line 43 "./sipqmotorstackQMotorStack.cpp"
#line 30 "/usr/share/sip/PyQt5/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qwindow.sip"
#include <qwindow.h>
#line 49 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 55 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qrect.sip"
#include <qrect.h>
#line 58 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmargins.sip"
#include <qmargins.h>
#line 64 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 70 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 73 "./sipqmotorstackQMotorStack.cpp"
#line 189 "/usr/share/sip/PyQt5/QtCore/qglobal.sip"
#include <QtGlobal>
#line 76 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qlocale.sip"
#include <qlocale.h>
#line 79 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 82 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qpoint.sip"
#include <qpoint.h>
#line 85 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qregion.sip"
#include <qregion.h>
#line 88 "./sipqmotorstackQMotorStack.cpp"
#line 28 "/usr/share/sip/PyQt5/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 91 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qsize.sip"
#include <qsize.h>
#line 94 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 97 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 100 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qfont.sip"
#include <qfont.h>
#line 103 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 106 "./sipqmotorstackQMotorStack.cpp"
#line 497 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 109 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 112 "./sipqmotorstackQMotorStack.cpp"
#line 459 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 115 "./sipqmotorstackQMotorStack.cpp"
#line 448 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 118 "./sipqmotorstackQMotorStack.cpp"
#line 558 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 121 "./sipqmotorstackQMotorStack.cpp"
#line 607 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 124 "./sipqmotorstackQMotorStack.cpp"
#line 580 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 127 "./sipqmotorstackQMotorStack.cpp"
#line 596 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 130 "./sipqmotorstackQMotorStack.cpp"
#line 663 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 133 "./sipqmotorstackQMotorStack.cpp"
#line 293 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 136 "./sipqmotorstackQMotorStack.cpp"
#line 470 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 139 "./sipqmotorstackQMotorStack.cpp"
#line 426 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 142 "./sipqmotorstackQMotorStack.cpp"
#line 413 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 145 "./sipqmotorstackQMotorStack.cpp"
#line 400 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 148 "./sipqmotorstackQMotorStack.cpp"
#line 386 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 151 "./sipqmotorstackQMotorStack.cpp"
#line 372 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 154 "./sipqmotorstackQMotorStack.cpp"
#line 351 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 157 "./sipqmotorstackQMotorStack.cpp"
#line 253 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 160 "./sipqmotorstackQMotorStack.cpp"
#line 205 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 163 "./sipqmotorstackQMotorStack.cpp"
#line 52 "/usr/share/sip/PyQt5/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 166 "./sipqmotorstackQMotorStack.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 169 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qaction.sip"
#include <qaction.h>
#line 172 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 175 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 178 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 181 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 184 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qcursor.sip"
#include <qcursor.h>
#line 187 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 190 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qpalette.sip"
#include <qpalette.h>
#line 193 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 196 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 199 "./sipqmotorstackQMotorStack.cpp"
#line 247 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 202 "./sipqmotorstackQMotorStack.cpp"
#line 235 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 205 "./sipqmotorstackQMotorStack.cpp"
#line 28 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 208 "./sipqmotorstackQMotorStack.cpp"
#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 211 "./sipqmotorstackQMotorStack.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 214 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qthread.sip"
#include <qthread.h>
#line 217 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 220 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregexp.sip"
#include <qregexp.h>
#line 223 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 226 "./sipqmotorstackQMotorStack.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 229 "./sipqmotorstackQMotorStack.cpp"


class sipQMotorStack : public  ::QMotorStack
{
public:
    sipQMotorStack(const  ::QString&, ::QWidget*);
    sipQMotorStack(const  ::QStringList&,const  ::QString&, ::QWidget*);
    sipQMotorStack(const  ::QStringList&, ::QWidget*);
    sipQMotorStack( ::QWidget*);
    virtual ~sipQMotorStack();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    bool sipProtectVirt_event(bool, ::QEvent*);
    void sipProtectVirt_mousePressEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_wheelEvent(bool, ::QWheelEvent*);
    void sipProtectVirt_keyPressEvent(bool, ::QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool, ::QKeyEvent*);
    void sipProtectVirt_focusInEvent(bool, ::QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool, ::QFocusEvent*);
    void sipProtectVirt_enterEvent(bool, ::QEvent*);
    void sipProtectVirt_leaveEvent(bool, ::QEvent*);
    void sipProtectVirt_paintEvent(bool, ::QPaintEvent*);
    void sipProtectVirt_moveEvent(bool, ::QMoveEvent*);
    void sipProtectVirt_resizeEvent(bool, ::QResizeEvent*);
    void sipProtectVirt_closeEvent(bool, ::QCloseEvent*);
    void sipProtectVirt_contextMenuEvent(bool, ::QContextMenuEvent*);
    void sipProtectVirt_tabletEvent(bool, ::QTabletEvent*);
    void sipProtectVirt_actionEvent(bool, ::QActionEvent*);
    void sipProtectVirt_dragEnterEvent(bool, ::QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool, ::QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool, ::QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool, ::QDropEvent*);
    void sipProtectVirt_showEvent(bool, ::QShowEvent*);
    void sipProtectVirt_hideEvent(bool, ::QHideEvent*);
    void sipProtectVirt_changeEvent(bool, ::QEvent*);
    int sipProtectVirt_metric(bool, ::QPaintDevice::PaintDeviceMetric) const;
    void sipProtectVirt_inputMethodEvent(bool, ::QInputMethodEvent*);
    void sipProtect_updateMicroFocus();
    void sipProtect_create( ::WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const  ::QByteArray&,void*,long*);
     ::QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool, ::QPainter*) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
     ::QPaintEngine* paintEngine() const;
    int devType() const;
    void setVisible(bool);
     ::QSize sizeHint() const;
     ::QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    void mousePressEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void wheelEvent( ::QWheelEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void enterEvent( ::QEvent*);
    void leaveEvent( ::QEvent*);
    void paintEvent( ::QPaintEvent*);
    void moveEvent( ::QMoveEvent*);
    void resizeEvent( ::QResizeEvent*);
    void closeEvent( ::QCloseEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void tabletEvent( ::QTabletEvent*);
    void actionEvent( ::QActionEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dropEvent( ::QDropEvent*);
    void showEvent( ::QShowEvent*);
    void hideEvent( ::QHideEvent*);
    void changeEvent( ::QEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    bool hasHeightForWidth() const;
    bool nativeEvent(const  ::QByteArray&,void*,long*);
     ::QPainter* sharedPainter() const;
    void initPainter( ::QPainter*) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMotorStack(const sipQMotorStack &);
    sipQMotorStack &operator = (const sipQMotorStack &);

    char sipPyMethods[46];
};

sipQMotorStack::sipQMotorStack(const  ::QString& a0, ::QWidget*a1):  ::QMotorStack(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMotorStack::sipQMotorStack(const  ::QStringList& a0,const  ::QString& a1, ::QWidget*a2):  ::QMotorStack(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMotorStack::sipQMotorStack(const  ::QStringList& a0, ::QWidget*a1):  ::QMotorStack(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMotorStack::sipQMotorStack( ::QWidget*a0):  ::QMotorStack(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMotorStack::~sipQMotorStack()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQMotorStack::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_qmotorstack_qt_metaobject(sipPySelf,sipType_QMotorStack);

    return  ::QMotorStack::metaObject();
}

int sipQMotorStack::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMotorStack::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_qmotorstack_qt_metacall(sipPySelf,sipType_QMotorStack,_c,_id,_a);

    return _id;
}

void *sipQMotorStack::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_qmotorstack_qt_metacast(sipPySelf, sipType_QMotorStack, _clname, &sipCpp) ? sipCpp :  ::QMotorStack::qt_metacast(_clname));
}

void sipQMotorStack::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QMotorStack::disconnectNotify(a0);
        return;
    }

    extern void sipVH_qmotorstack_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_qmotorstack_35(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QMotorStack::connectNotify(a0);
        return;
    }

    extern void sipVH_qmotorstack_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_qmotorstack_35(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QMotorStack::customEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_qmotorstack_7(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QMotorStack::childEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_qmotorstack_34(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QMotorStack::timerEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_qmotorstack_33(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMotorStack::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QMotorStack::eventFilter(a0,a1);

    extern bool sipVH_qmotorstack_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_qmotorstack_32(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQMotorStack::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QMotorStack::event(a0);

    extern bool sipVH_qmotorstack_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_qmotorstack_31(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQMotorStack::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QMotorStack::metric(a0);

    extern int sipVH_qmotorstack_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_qmotorstack_30(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQMotorStack::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QMotorStack::paintEngine();

    extern  ::QPaintEngine* sipVH_qmotorstack_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qmotorstack_29(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQMotorStack::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QMotorStack::devType();

    extern int sipVH_qmotorstack_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qmotorstack_28(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQMotorStack::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QMotorStack::setVisible(a0);
        return;
    }

    extern void sipVH_qmotorstack_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_qmotorstack_27(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQMotorStack::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QMotorStack::sizeHint();

    extern  ::QSize sipVH_qmotorstack_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qmotorstack_26(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQMotorStack::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QMotorStack::minimumSizeHint();

    extern  ::QSize sipVH_qmotorstack_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qmotorstack_26(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQMotorStack::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QMotorStack::heightForWidth(a0);

    extern int sipVH_qmotorstack_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_qmotorstack_25(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QMotorStack::mousePressEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_qmotorstack_24(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QMotorStack::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_qmotorstack_24(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QMotorStack::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_qmotorstack_24(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QMotorStack::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_qmotorstack_24(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QMotorStack::wheelEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_qmotorstack_23(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QMotorStack::keyPressEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_qmotorstack_22(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QMotorStack::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_qmotorstack_22(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QMotorStack::focusInEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_qmotorstack_21(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QMotorStack::focusOutEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_qmotorstack_21(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QMotorStack::enterEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_qmotorstack_7(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QMotorStack::leaveEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_qmotorstack_7(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QMotorStack::paintEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_qmotorstack_20(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QMotorStack::moveEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_qmotorstack_19(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QMotorStack::resizeEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_qmotorstack_18(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QMotorStack::closeEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_qmotorstack_17(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QMotorStack::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_qmotorstack_16(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QMotorStack::tabletEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_qmotorstack_15(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QMotorStack::actionEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_qmotorstack_14(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QMotorStack::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_qmotorstack_13(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QMotorStack::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_qmotorstack_12(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QMotorStack::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_qmotorstack_11(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QMotorStack::dropEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_qmotorstack_10(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QMotorStack::showEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_qmotorstack_9(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QMotorStack::hideEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_qmotorstack_8(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QMotorStack::changeEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_qmotorstack_7(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMotorStack::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QMotorStack::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_qmotorstack_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_qmotorstack_6(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQMotorStack::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QMotorStack::inputMethodQuery(a0);

    extern  ::QVariant sipVH_qmotorstack_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_qmotorstack_5(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMotorStack::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QMotorStack::focusNextPrevChild(a0);

    extern bool sipVH_qmotorstack_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_qmotorstack_4(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMotorStack::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QMotorStack::hasHeightForWidth();

    extern bool sipVH_qmotorstack_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qmotorstack_3(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQMotorStack::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QMotorStack::nativeEvent(a0,a1,a2);

    extern bool sipVH_qmotorstack_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_qmotorstack_2(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQMotorStack::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QMotorStack::sharedPainter();

    extern  ::QPainter* sipVH_qmotorstack_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qmotorstack_1(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQMotorStack::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
         ::QMotorStack::initPainter(a0);
        return;
    }

    extern void sipVH_qmotorstack_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_qmotorstack_0(sipGILState, sipImportedVirtErrorHandlers_qmotorstack_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQMotorStack::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQMotorStack::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQMotorStack::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQMotorStack::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQMotorStack::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQMotorStack::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQMotorStack::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQMotorStack::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQMotorStack::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

bool sipQMotorStack::sipProtectVirt_event(bool sipSelfWasArg, ::QEvent*a0)
{
    return (sipSelfWasArg ?  ::QWidget::event(a0) : event(a0));
}

void sipQMotorStack::sipProtectVirt_mousePressEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQMotorStack::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQMotorStack::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQMotorStack::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQMotorStack::sipProtectVirt_wheelEvent(bool sipSelfWasArg, ::QWheelEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::wheelEvent(a0) : wheelEvent(a0));
}

void sipQMotorStack::sipProtectVirt_keyPressEvent(bool sipSelfWasArg, ::QKeyEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQMotorStack::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg, ::QKeyEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQMotorStack::sipProtectVirt_focusInEvent(bool sipSelfWasArg, ::QFocusEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::focusInEvent(a0) : focusInEvent(a0));
}

void sipQMotorStack::sipProtectVirt_focusOutEvent(bool sipSelfWasArg, ::QFocusEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQMotorStack::sipProtectVirt_enterEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQMotorStack::sipProtectVirt_leaveEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQMotorStack::sipProtectVirt_paintEvent(bool sipSelfWasArg, ::QPaintEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::paintEvent(a0) : paintEvent(a0));
}

void sipQMotorStack::sipProtectVirt_moveEvent(bool sipSelfWasArg, ::QMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQMotorStack::sipProtectVirt_resizeEvent(bool sipSelfWasArg, ::QResizeEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::resizeEvent(a0) : resizeEvent(a0));
}

void sipQMotorStack::sipProtectVirt_closeEvent(bool sipSelfWasArg, ::QCloseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQMotorStack::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg, ::QContextMenuEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQMotorStack::sipProtectVirt_tabletEvent(bool sipSelfWasArg, ::QTabletEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQMotorStack::sipProtectVirt_actionEvent(bool sipSelfWasArg, ::QActionEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQMotorStack::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg, ::QDragEnterEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQMotorStack::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg, ::QDragMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQMotorStack::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg, ::QDragLeaveEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQMotorStack::sipProtectVirt_dropEvent(bool sipSelfWasArg, ::QDropEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::dropEvent(a0) : dropEvent(a0));
}

void sipQMotorStack::sipProtectVirt_showEvent(bool sipSelfWasArg, ::QShowEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::showEvent(a0) : showEvent(a0));
}

void sipQMotorStack::sipProtectVirt_hideEvent(bool sipSelfWasArg, ::QHideEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::hideEvent(a0) : hideEvent(a0));
}

void sipQMotorStack::sipProtectVirt_changeEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::changeEvent(a0) : changeEvent(a0));
}

int sipQMotorStack::sipProtectVirt_metric(bool sipSelfWasArg, ::QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ?  ::QWidget::metric(a0) : metric(a0));
}

void sipQMotorStack::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg, ::QInputMethodEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQMotorStack::sipProtect_updateMicroFocus()
{
     ::QWidget::updateMicroFocus();
}

void sipQMotorStack::sipProtect_create( ::WId a0,bool a1,bool a2)
{
     ::QWidget::create(a0,a1,a2);
}

void sipQMotorStack::sipProtect_destroy(bool a0,bool a1)
{
     ::QWidget::destroy(a0,a1);
}

bool sipQMotorStack::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ?  ::QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQMotorStack::sipProtect_focusNextChild()
{
    return  ::QWidget::focusNextChild();
}

bool sipQMotorStack::sipProtect_focusPreviousChild()
{
    return  ::QWidget::focusPreviousChild();
}

bool sipQMotorStack::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const  ::QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ?  ::QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

 ::QPainter* sipQMotorStack::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QWidget::sharedPainter() : sharedPainter());
}

void sipQMotorStack::sipProtectVirt_initPainter(bool sipSelfWasArg, ::QPainter*a0) const
{
    (sipSelfWasArg ?  ::QWidget::initPainter(a0) : initPainter(a0));
}


extern "C" {static PyObject *meth_QMotorStack_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMotorStack, &sipCpp))
        {
             ::QObject*sipRes = 0;

#line 560 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }
#line 1468 "./sipqmotorstackQMotorStack.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QMotorStack, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 591 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 1525 "./sipqmotorstackQMotorStack.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMotorStack, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_senderSignalIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_isSignalConnected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_event, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_mousePressEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_mouseReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_mouseDoubleClickEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_mouseMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_wheelEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_keyPressEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_keyReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_focusInEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_focusOutEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_enterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_leaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_paintEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMoveEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_moveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_resizeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QCloseEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_closeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_contextMenuEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTabletEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_tabletEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QActionEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_actionEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_dragEnterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_dragMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_dragLeaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_dropEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_showEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHideEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_hideEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_changeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_metric, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_inputMethodEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMotorStack, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_updateMicroFocus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::WId a0def = 0;
         ::WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQMotorStack *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_create, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQMotorStack *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QMotorStack, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_destroy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QMotorStack, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_focusNextPrevChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMotorStack, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_focusNextChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMotorStack, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_focusPreviousChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_nativeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMotorStack, &sipCpp))
        {
             ::QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_sharedPainter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const sipQMotorStack *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_initPainter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_isLocked(PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_isLocked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMotorStack, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLocked();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_isLocked, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_motorList(PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_motorList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMotorStack, &sipCpp))
        {
            QList< ::QCaMotorGUI*>*sipRes;

            sipRes = new QList< ::QCaMotorGUI*>(sipCpp->motorList());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QCaMotorGUI,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_motorList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_lock(PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_lock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMotorStack, &sipCpp, &a0))
        {
            sipCpp->lock(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_lock, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_showGeneral(PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_showGeneral(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_QMotorStack, &sipCpp, &a0))
        {
            sipCpp->showGeneral(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_showGeneral, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_addMotor(PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_addMotor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString& a0def = "";
        const  ::QString* a0 = &a0def;
        int a0State = 0;
        bool a1 = 0;
        bool a2 = 0;
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J1bb", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
             ::QCaMotorGUI*sipRes;

            sipRes = sipCpp->addMotor(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QCaMotorGUI,NULL);
        }
    }

    {
         ::QCaMotorGUI* a0;
        bool a1 = 0;
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|b", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QCaMotorGUI, &a0, &a1))
        {
            sipCpp->addMotor(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QCaMotor* a0;
        bool a1 = 0;
        bool a2 = 0;
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|bb", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QCaMotor, &a0, &a1, &a2))
        {
             ::QCaMotorGUI*sipRes;

            sipRes = sipCpp->addMotor(a0,a1,a2);

            return sipConvertFromType(sipRes,sipType_QCaMotorGUI,NULL);
        }
    }

    {
        const QList< ::QCaMotor*>* a0;
        int a0State = 0;
        bool a1 = 0;
        bool a2 = 0;
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|bb", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QList_0101QCaMotor,&a0, &a0State, &a1, &a2))
        {
            sipCpp->addMotor(*a0,a1,a2);
            sipReleaseType(const_cast<QList< ::QCaMotor*> *>(a0),sipType_QList_0101QCaMotor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList< ::QCaMotorGUI*>* a0;
        int a0State = 0;
        bool a1 = 0;
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|b", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QList_0101QCaMotorGUI,&a0, &a0State, &a1))
        {
            sipCpp->addMotor(*a0,a1);
            sipReleaseType(const_cast<QList< ::QCaMotorGUI*> *>(a0),sipType_QList_0101QCaMotorGUI,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_addMotor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_removeMotor(PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_removeMotor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotorGUI* a0;
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QCaMotorGUI, &a0))
        {
            sipCpp->removeMotor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_removeMotor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_clear(PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMotorStack, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_clear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_saveConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_saveConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->saveConfiguration(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_saveConfiguration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_loadConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_loadConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMotorStack, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->loadConfiguration(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_loadConfiguration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMotorStack_listChanged(PyObject *, PyObject *);}
static PyObject *meth_QMotorStack_listChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMotorStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMotorStack, &sipCpp))
        {
            sipCpp->listChanged();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMotorStack, sipName_listChanged, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMotorStack(void *, const sipTypeDef *);}
static void *cast_QMotorStack(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMotorStack *sipCpp = reinterpret_cast< ::QMotorStack *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMotorStack(void *, int);}
static void release_QMotorStack(void *sipCppV, int)
{
     ::QMotorStack *sipCpp = reinterpret_cast< ::QMotorStack *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMotorStack(sipSimpleWrapper *);}
static void dealloc_QMotorStack(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMotorStack *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMotorStack(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMotorStack(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMotorStack(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQMotorStack *sipCpp = 0;

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;
         ::QWidget* a1 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|J1J8", sipType_QString,&a0, &a0State, sipType_QWidget, &a1))
        {
            sipCpp = new sipQMotorStack(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QWidget* a2 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1|J1J8", sipType_QStringList,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QWidget, &a2))
        {
            sipCpp = new sipQMotorStack(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QWidget* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J8", sipType_QStringList,&a0, &a0State, sipType_QWidget, &a1))
        {
            sipCpp = new sipQMotorStack(*a0,a1);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QWidget* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QWidget, &a0))
        {
            sipCpp = new sipQMotorStack(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMotorStack[] = {{0, 2, 1}};


static PyMethodDef methods_QMotorStack[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QMotorStack_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_addMotor), meth_QMotorStack_addMotor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QMotorStack_changeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QMotorStack_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QMotorStack_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QMotorStack_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QMotorStack_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QMotorStack_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QMotorStack_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QMotorStack_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QMotorStack_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QMotorStack_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QMotorStack_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QMotorStack_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QMotorStack_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QMotorStack_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QMotorStack_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QMotorStack_event, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QMotorStack_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QMotorStack_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QMotorStack_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QMotorStack_focusOutEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QMotorStack_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QMotorStack_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QMotorStack_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QMotorStack_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isLocked), meth_QMotorStack_isLocked, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QMotorStack_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QMotorStack_keyPressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QMotorStack_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QMotorStack_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_listChanged), meth_QMotorStack_listChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_loadConfiguration), meth_QMotorStack_loadConfiguration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lock), meth_QMotorStack_lock, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QMotorStack_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_motorList), meth_QMotorStack_motorList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QMotorStack_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QMotorStack_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QMotorStack_mousePressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QMotorStack_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QMotorStack_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QMotorStack_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QMotorStack_paintEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QMotorStack_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeMotor), meth_QMotorStack_removeMotor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QMotorStack_resizeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_saveConfiguration), meth_QMotorStack_saveConfiguration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QMotorStack_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QMotorStack_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QMotorStack_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QMotorStack_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showGeneral), meth_QMotorStack_showGeneral, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QMotorStack_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QMotorStack_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QMotorStack_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QMotorStack_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};


static pyqt5ClassPluginDef plugin_QMotorStack = {
    & ::QMotorStack::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_qmotorstack_QMotorStack = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMotorStack,
        {0},
        &plugin_QMotorStack
    },
    {
        sipNameNr_QMotorStack,
        {0, 0, 1},
        56, methods_QMotorStack,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QMotorStack,
    0,
    init_type_QMotorStack,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMotorStack,
    0,
    0,
    0,
    release_QMotorStack,
    cast_QMotorStack,
    0,
    0,
    0,
    0,
    0,
    0
};
