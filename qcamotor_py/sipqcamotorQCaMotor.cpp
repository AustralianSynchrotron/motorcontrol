/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.12
 */

#include "sipAPIqcamotor.h"

#line 12 "qcamotor.sip"
#include "qcamotor.h"
#line 12 "./sipqcamotorQCaMotor.cpp"

#line 28 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 16 "./sipqcamotorQCaMotor.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 19 "./sipqcamotorQCaMotor.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 22 "./sipqcamotorQCaMotor.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 25 "./sipqcamotorQCaMotor.cpp"
#line 247 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28 "./sipqcamotorQCaMotor.cpp"
#line 235 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31 "./sipqcamotorQCaMotor.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 34 "./sipqcamotorQCaMotor.cpp"
#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 37 "./sipqcamotorQCaMotor.cpp"
#line 30 "/usr/share/sip/PyQt5/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 40 "./sipqcamotorQCaMotor.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 43 "./sipqcamotorQCaMotor.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "./sipqcamotorQCaMotor.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qthread.sip"
#include <qthread.h>
#line 49 "./sipqcamotorQCaMotor.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52 "./sipqcamotorQCaMotor.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregexp.sip"
#include <qregexp.h>
#line 55 "./sipqcamotorQCaMotor.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 58 "./sipqcamotorQCaMotor.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 61 "./sipqcamotorQCaMotor.cpp"


class sipQCaMotor : public  ::QCaMotor
{
public:
    sipQCaMotor( ::QObject*);
    sipQCaMotor(const  ::QString&, ::QObject*);
    virtual ~sipQCaMotor();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCaMotor(const sipQCaMotor &);
    sipQCaMotor &operator = (const sipQCaMotor &);

    char sipPyMethods[7];
};

sipQCaMotor::sipQCaMotor( ::QObject*a0):  ::QCaMotor(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCaMotor::sipQCaMotor(const  ::QString& a0, ::QObject*a1):  ::QCaMotor(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCaMotor::~sipQCaMotor()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQCaMotor::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_qcamotor_qt_metaobject(sipPySelf,sipType_QCaMotor);

    return  ::QCaMotor::metaObject();
}

int sipQCaMotor::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QCaMotor::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_qcamotor_qt_metacall(sipPySelf,sipType_QCaMotor,_c,_id,_a);

    return _id;
}

void *sipQCaMotor::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_qcamotor_qt_metacast(sipPySelf, sipType_QCaMotor, _clname, &sipCpp) ? sipCpp :  ::QCaMotor::qt_metacast(_clname));
}

bool sipQCaMotor::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QCaMotor::event(a0);

    extern bool sipVH_qcamotor_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_qcamotor_5(sipGILState, sipImportedVirtErrorHandlers_qcamotor_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQCaMotor::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QCaMotor::eventFilter(a0,a1);

    extern bool sipVH_qcamotor_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_qcamotor_4(sipGILState, sipImportedVirtErrorHandlers_qcamotor_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQCaMotor::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QCaMotor::timerEvent(a0);
        return;
    }

    extern void sipVH_qcamotor_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_qcamotor_3(sipGILState, sipImportedVirtErrorHandlers_qcamotor_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCaMotor::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QCaMotor::childEvent(a0);
        return;
    }

    extern void sipVH_qcamotor_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_qcamotor_2(sipGILState, sipImportedVirtErrorHandlers_qcamotor_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCaMotor::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QCaMotor::customEvent(a0);
        return;
    }

    extern void sipVH_qcamotor_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_qcamotor_1(sipGILState, sipImportedVirtErrorHandlers_qcamotor_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCaMotor::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QCaMotor::connectNotify(a0);
        return;
    }

    extern void sipVH_qcamotor_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_qcamotor_0(sipGILState, sipImportedVirtErrorHandlers_qcamotor_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCaMotor::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QCaMotor::disconnectNotify(a0);
        return;
    }

    extern void sipVH_qcamotor_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_qcamotor_0(sipGILState, sipImportedVirtErrorHandlers_qcamotor_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQCaMotor::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQCaMotor::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQCaMotor::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQCaMotor::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQCaMotor::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQCaMotor::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQCaMotor::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQCaMotor::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQCaMotor::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}


extern "C" {static PyObject *meth_QCaMotor_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQCaMotor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
             ::QObject*sipRes = 0;

#line 560 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }
#line 358 "./sipqcamotorQCaMotor.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQCaMotor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 591 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 415 "./sipqcamotorQCaMotor.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQCaMotor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQCaMotor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQCaMotor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQCaMotor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQCaMotor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQCaMotor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_senderSignalIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQCaMotor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_isSignalConnected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_wait_stop(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_wait_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            sipCpp->wait_stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_wait_stop, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_wait_start(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_wait_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            sipCpp->wait_start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_wait_start, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_saveConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_saveConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->saveConfiguration(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_saveConfiguration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_loadConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_loadConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->loadConfiguration(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_loadConfiguration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setPv(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setPv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString& a0def = "";
        const  ::QString* a0 = &a0def;
        int a0State = 0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J1", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPv(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setPv, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setDescription(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDescription(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setDescription, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setPrecision(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setPrecision, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setUnits(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setUnits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setUnits(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setUnits, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setUserPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setUserPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setUserPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setUserPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setDialPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setDialPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setDialPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setDialPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setRawPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setRawPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setRawPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setRawPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_goUserPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_goUserPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor::MotionExit a1 =  ::QCaMotor::IMMIDIATELY;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd|E", &sipSelf, sipType_QCaMotor, &sipCpp, &a0, sipType_QCaMotor_MotionExit, &a1))
        {
            sipCpp->goUserPosition(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_goUserPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_goDialPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_goDialPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor::MotionExit a1 =  ::QCaMotor::IMMIDIATELY;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd|E", &sipSelf, sipType_QCaMotor, &sipCpp, &a0, sipType_QCaMotor_MotionExit, &a1))
        {
            sipCpp->goDialPosition(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_goDialPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_goRawPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_goRawPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor::MotionExit a1 =  ::QCaMotor::IMMIDIATELY;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd|E", &sipSelf, sipType_QCaMotor, &sipCpp, &a0, sipType_QCaMotor_MotionExit, &a1))
        {
            sipCpp->goRawPosition(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_goRawPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_goLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_goLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QCaMotor::MotionExit a1 =  ::QCaMotor::IMMIDIATELY;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|E", &sipSelf, sipType_QCaMotor, &sipCpp, &a0, sipType_QCaMotor_MotionExit, &a1))
        {
            sipCpp->goLimit(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_goLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_goStep(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_goStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QCaMotor::MotionExit a1 =  ::QCaMotor::IMMIDIATELY;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|E", &sipSelf, sipType_QCaMotor, &sipCpp, &a0, sipType_QCaMotor_MotionExit, &a1))
        {
            sipCpp->goStep(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_goStep, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_goHome(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_goHome(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QCaMotor::MotionExit a1 =  ::QCaMotor::IMMIDIATELY;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|E", &sipSelf, sipType_QCaMotor, &sipCpp, &a0, sipType_QCaMotor_MotionExit, &a1))
        {
            sipCpp->goHome(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_goHome, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_goRelative(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_goRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor::MotionExit a1 =  ::QCaMotor::IMMIDIATELY;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd|E", &sipSelf, sipType_QCaMotor, &sipCpp, &a0, sipType_QCaMotor_MotionExit, &a1))
        {
            sipCpp->goRelative(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_goRelative, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_jog(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_jog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bbi", &sipSelf, sipType_QCaMotor, &sipCpp, &a0, &a1))
        {
            sipCpp->jog(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_jog, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setStep(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setStep(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setStep, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setDeadBand(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setDeadBand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setDeadBand(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setDeadBand, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_undoLastMotion(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_undoLastMotion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor::MotionExit a0 =  ::QCaMotor::IMMIDIATELY;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|E", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QCaMotor_MotionExit, &a0))
        {
            sipCpp->undoLastMotion(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_undoLastMotion, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setOffset(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setOffset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setOffsetMode(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setOffsetMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor::OffMode a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QCaMotor_OffMode, &a0))
        {
            sipCpp->setOffsetMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setOffsetMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setDirection(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor::Direction a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QCaMotor_Direction, &a0))
        {
            sipCpp->setDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setSuMode(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setSuMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor::SuMode a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QCaMotor_SuMode, &a0))
        {
            sipCpp->setSuMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setSuMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setUserHiLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setUserHiLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setUserHiLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setUserHiLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setUserLoLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setUserLoLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setUserLoLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setUserLoLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setDialHiLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setDialHiLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setDialHiLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setDialHiLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setDialLoLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setDialLoLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setDialLoLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setDialLoLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setMotorResolution(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setMotorResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setMotorResolution(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setMotorResolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setReadbackResolution(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setReadbackResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setReadbackResolution(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setReadbackResolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setEncoderResolution(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setEncoderResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setEncoderResolution(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setEncoderResolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setUnitsPerRev(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setUnitsPerRev(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setUnitsPerRev(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setUnitsPerRev, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setStepsPerRev(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setStepsPerRev(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setStepsPerRev(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setStepsPerRev, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setMaximumSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setMaximumSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setMaximumSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setMaximumSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setNormalSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setNormalSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setNormalSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setNormalSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setRevSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setRevSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setRevSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setRevSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setBacklashSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setBacklashSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setBacklashSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setBacklashSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setJogSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setJogSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setJogSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setJogSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setAcceleration(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setAcceleration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setAcceleration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setAcceleration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setBacklashAcceleration(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setBacklashAcceleration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setBacklashAcceleration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setBacklashAcceleration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setJogAcceleration(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setJogAcceleration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setJogAcceleration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setJogAcceleration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_stop(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor::MotionExit a0 =  ::QCaMotor::IMMIDIATELY;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|E", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QCaMotor_MotionExit, &a0))
        {
            sipCpp->stop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_stop, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setUseReadback(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setUseReadback(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setUseReadback(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setUseReadback, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setUseEncoder(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setUseEncoder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setUseEncoder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setUseEncoder, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setBacklash(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setBacklash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setBacklash(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setBacklash, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setSpmgMode(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setSpmgMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor::SpmgMode a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QCaMotor_SpmgMode, &a0))
        {
            sipCpp->setSpmgMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setSpmgMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_setPower(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_setPower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->setPower(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_setPower, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_printError(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_printError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->printError(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_printError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getPv(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getPv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->getPv());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getPv, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getDescription(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->getDescription());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getDescription, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getPrecision(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getPrecision();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getPrecision, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getUnits(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getUnits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->getUnits());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getUnits, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getUserPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getUserPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getUserPosition();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getUserPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_get(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->get();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_get, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getDialPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getDialPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getDialPosition();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getDialPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getRawPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getRawPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getRawPosition();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getRawPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getUserGoal(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getUserGoal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getUserGoal();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getUserGoal, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getDialGoal(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getDialGoal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getDialGoal();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getDialGoal, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getRawGoal(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getRawGoal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getRawGoal();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getRawGoal, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getStep(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getStep();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getStep, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getDeadBand(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getDeadBand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getDeadBand();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getDeadBand, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getLastMotion(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getLastMotion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getLastMotion();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getLastMotion, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getOffset(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getOffset();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getOffset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getOffsetMode(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getOffsetMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
             ::QCaMotor::OffMode sipRes;

            sipRes = sipCpp->getOffsetMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCaMotor_OffMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getOffsetMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getDirection(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
             ::QCaMotor::Direction sipRes;

            sipRes = sipCpp->getDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCaMotor_Direction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getSuMode(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getSuMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
             ::QCaMotor::SuMode sipRes;

            sipRes = sipCpp->getSuMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCaMotor_SuMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getSuMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getHiLimitStatus(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getHiLimitStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getHiLimitStatus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getHiLimitStatus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getLoLimitStatus(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getLoLimitStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getLoLimitStatus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getLoLimitStatus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getLimitStatus(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getLimitStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getLimitStatus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getLimitStatus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getUserHiLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getUserHiLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getUserHiLimit();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getUserHiLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getUserLoLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getUserLoLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getUserLoLimit();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getUserLoLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getDialLoLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getDialLoLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getDialLoLimit();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getDialLoLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getDialHiLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getDialHiLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getDialHiLimit();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getDialHiLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getMotorResolution(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getMotorResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getMotorResolution();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getMotorResolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getReadbackResolution(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getReadbackResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getReadbackResolution();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getReadbackResolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getEncoderResolution(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getEncoderResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getEncoderResolution();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getEncoderResolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getUnitsPerRev(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getUnitsPerRev(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getUnitsPerRev();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getUnitsPerRev, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getStepsPerRev(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getStepsPerRev(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getStepsPerRev();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getStepsPerRev, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getMaximumSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getMaximumSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getMaximumSpeed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getMaximumSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getNormalSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getNormalSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getNormalSpeed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getNormalSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getRevSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getRevSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getRevSpeed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getRevSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getBacklashSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getBacklashSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getBacklashSpeed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getBacklashSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getJogSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getJogSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getJogSpeed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getJogSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getAcceleration(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getAcceleration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getAcceleration();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getAcceleration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getBacklashAcceleration(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getBacklashAcceleration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getBacklashAcceleration();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getBacklashAcceleration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getJogAcceleration(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getJogAcceleration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getJogAcceleration();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getJogAcceleration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_isConnected(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_isConnected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isConnected();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_isConnected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_isMoving(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_isMoving(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMoving();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_isMoving, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getUseReadback(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getUseReadback(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getUseReadback();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getUseReadback, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getUseEncoder(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getUseEncoder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getUseEncoder();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getUseEncoder, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getBacklash(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getBacklash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getBacklash();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getBacklash, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getSpmgMode(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getSpmgMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
             ::QCaMotor::SpmgMode sipRes;

            sipRes = sipCpp->getSpmgMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCaMotor_SpmgMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getSpmgMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getPower(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getPower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getPower();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getPower, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_getPowerConnection(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_getPowerConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getPowerConnection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_getPowerConnection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_isWired(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_isWired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWired();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_isWired, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedPv(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedPv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString a0def = QString();
         ::QString* a0 = &a0def;
        int a0State = 0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J1", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->changedPv(*a0);
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedPv, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedDescription(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->changedDescription(*a0);
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedDescription, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedPrecision(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedPrecision, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedUnits(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedUnits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->changedUnits(*a0);
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedUnits, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedUserPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedUserPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedUserPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedUserPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedDialPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedDialPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedDialPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedDialPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedRawPosition(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedRawPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedRawPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedRawPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedUserGoal(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedUserGoal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedUserGoal(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedUserGoal, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedDialGoal(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedDialGoal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedDialGoal(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedDialGoal, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedRawGoal(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedRawGoal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedRawGoal(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedRawGoal, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedStep(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedStep(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedStep, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedDeadBand(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedDeadBand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedDeadBand(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedDeadBand, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedOffset(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedOffset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedOffsetMode(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedOffsetMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor::OffMode a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QCaMotor_OffMode, &a0))
        {
            sipCpp->changedOffsetMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedOffsetMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedDirection(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor::Direction a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QCaMotor_Direction, &a0))
        {
            sipCpp->changedDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedSuMode(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedSuMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor::SuMode a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QCaMotor_SuMode, &a0))
        {
            sipCpp->changedSuMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedSuMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedHiLimitStatus(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedHiLimitStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedHiLimitStatus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedHiLimitStatus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedLoLimitStatus(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedLoLimitStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedLoLimitStatus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedLoLimitStatus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedUserHiLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedUserHiLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedUserHiLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedUserHiLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedUserLoLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedUserLoLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedUserLoLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedUserLoLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedDialLoLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedDialLoLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedDialLoLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedDialLoLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedDialHiLimit(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedDialHiLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedDialHiLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedDialHiLimit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedMotorResolution(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedMotorResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedMotorResolution(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedMotorResolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedReadbackResolution(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedReadbackResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedReadbackResolution(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedReadbackResolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedEncoderResolution(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedEncoderResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedEncoderResolution(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedEncoderResolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedUnitsPerRev(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedUnitsPerRev(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedUnitsPerRev(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedUnitsPerRev, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedStepsPerRev(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedStepsPerRev(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedStepsPerRev(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedStepsPerRev, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedMaximumSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedMaximumSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedMaximumSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedMaximumSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedNormalSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedNormalSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedNormalSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedNormalSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedRevSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedRevSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedRevSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedRevSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedBacklashSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedBacklashSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedBacklashSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedBacklashSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedJogSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedJogSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedJogSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedJogSpeed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedAcceleration(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedAcceleration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedAcceleration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedAcceleration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedBacklashAcceleration(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedBacklashAcceleration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedBacklashAcceleration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedBacklashAcceleration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedJogAcceleration(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedJogAcceleration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedJogAcceleration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedJogAcceleration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedConnected(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedConnected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedConnected(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedConnected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedMoving(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedMoving(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedMoving(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedMoving, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_stopped(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_stopped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCaMotor, &sipCpp))
        {
            sipCpp->stopped();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_stopped, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedUseReadback(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedUseReadback(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedUseReadback(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedUseReadback, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedUseEncoder(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedUseEncoder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedUseEncoder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedUseEncoder, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedBacklash(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedBacklash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedBacklash(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedBacklash, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedSpmgMode(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedSpmgMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCaMotor::SpmgMode a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QCaMotor_SpmgMode, &a0))
        {
            sipCpp->changedSpmgMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedSpmgMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedPower(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedPower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedPower(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedPower, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedPowerConnection(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedPowerConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedPowerConnection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedPowerConnection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_changedWired(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_changedWired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCaMotor, &sipCpp, &a0))
        {
            sipCpp->changedWired(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_changedWired, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCaMotor_error(PyObject *, PyObject *);}
static PyObject *meth_QCaMotor_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::QCaMotor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCaMotor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->error(*a0);
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCaMotor, sipName_error, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QCaMotor(void *, const sipTypeDef *);}
static void *cast_QCaMotor(void *sipCppV, const sipTypeDef *targetType)
{
     ::QCaMotor *sipCpp = reinterpret_cast< ::QCaMotor *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCaMotor(void *, int);}
static void release_QCaMotor(void *sipCppV, int)
{
     ::QCaMotor *sipCpp = reinterpret_cast< ::QCaMotor *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QCaMotor(sipSimpleWrapper *);}
static void dealloc_QCaMotor(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQCaMotor *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCaMotor(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QCaMotor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCaMotor(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQCaMotor *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQCaMotor(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQCaMotor(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCaMotor[] = {{3, 0, 1}};


static PyMethodDef methods_QCaMotor[] = {
    {SIP_MLNAME_CAST(sipName_changedAcceleration), meth_QCaMotor_changedAcceleration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedBacklash), meth_QCaMotor_changedBacklash, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedBacklashAcceleration), meth_QCaMotor_changedBacklashAcceleration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedBacklashSpeed), meth_QCaMotor_changedBacklashSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedConnected), meth_QCaMotor_changedConnected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedDeadBand), meth_QCaMotor_changedDeadBand, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedDescription), meth_QCaMotor_changedDescription, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedDialGoal), meth_QCaMotor_changedDialGoal, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedDialHiLimit), meth_QCaMotor_changedDialHiLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedDialLoLimit), meth_QCaMotor_changedDialLoLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedDialPosition), meth_QCaMotor_changedDialPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedDirection), meth_QCaMotor_changedDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedEncoderResolution), meth_QCaMotor_changedEncoderResolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedHiLimitStatus), meth_QCaMotor_changedHiLimitStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedJogAcceleration), meth_QCaMotor_changedJogAcceleration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedJogSpeed), meth_QCaMotor_changedJogSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedLoLimitStatus), meth_QCaMotor_changedLoLimitStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedMaximumSpeed), meth_QCaMotor_changedMaximumSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedMotorResolution), meth_QCaMotor_changedMotorResolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedMoving), meth_QCaMotor_changedMoving, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedNormalSpeed), meth_QCaMotor_changedNormalSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedOffset), meth_QCaMotor_changedOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedOffsetMode), meth_QCaMotor_changedOffsetMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedPower), meth_QCaMotor_changedPower, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedPowerConnection), meth_QCaMotor_changedPowerConnection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedPrecision), meth_QCaMotor_changedPrecision, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedPv), meth_QCaMotor_changedPv, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedRawGoal), meth_QCaMotor_changedRawGoal, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedRawPosition), meth_QCaMotor_changedRawPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedReadbackResolution), meth_QCaMotor_changedReadbackResolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedRevSpeed), meth_QCaMotor_changedRevSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedSpmgMode), meth_QCaMotor_changedSpmgMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedStep), meth_QCaMotor_changedStep, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedStepsPerRev), meth_QCaMotor_changedStepsPerRev, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedSuMode), meth_QCaMotor_changedSuMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedUnits), meth_QCaMotor_changedUnits, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedUnitsPerRev), meth_QCaMotor_changedUnitsPerRev, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedUseEncoder), meth_QCaMotor_changedUseEncoder, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedUseReadback), meth_QCaMotor_changedUseReadback, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedUserGoal), meth_QCaMotor_changedUserGoal, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedUserHiLimit), meth_QCaMotor_changedUserHiLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedUserLoLimit), meth_QCaMotor_changedUserLoLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedUserPosition), meth_QCaMotor_changedUserPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changedWired), meth_QCaMotor_changedWired, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QCaMotor_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QCaMotor_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QCaMotor_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QCaMotor_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QCaMotor_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get), meth_QCaMotor_get, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getAcceleration), meth_QCaMotor_getAcceleration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getBacklash), meth_QCaMotor_getBacklash, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getBacklashAcceleration), meth_QCaMotor_getBacklashAcceleration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getBacklashSpeed), meth_QCaMotor_getBacklashSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDeadBand), meth_QCaMotor_getDeadBand, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDescription), meth_QCaMotor_getDescription, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDialGoal), meth_QCaMotor_getDialGoal, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDialHiLimit), meth_QCaMotor_getDialHiLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDialLoLimit), meth_QCaMotor_getDialLoLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDialPosition), meth_QCaMotor_getDialPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDirection), meth_QCaMotor_getDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getEncoderResolution), meth_QCaMotor_getEncoderResolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getHiLimitStatus), meth_QCaMotor_getHiLimitStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getJogAcceleration), meth_QCaMotor_getJogAcceleration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getJogSpeed), meth_QCaMotor_getJogSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getLastMotion), meth_QCaMotor_getLastMotion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getLimitStatus), meth_QCaMotor_getLimitStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getLoLimitStatus), meth_QCaMotor_getLoLimitStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getMaximumSpeed), meth_QCaMotor_getMaximumSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getMotorResolution), meth_QCaMotor_getMotorResolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNormalSpeed), meth_QCaMotor_getNormalSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getOffset), meth_QCaMotor_getOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getOffsetMode), meth_QCaMotor_getOffsetMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getPower), meth_QCaMotor_getPower, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getPowerConnection), meth_QCaMotor_getPowerConnection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getPrecision), meth_QCaMotor_getPrecision, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getPv), meth_QCaMotor_getPv, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRawGoal), meth_QCaMotor_getRawGoal, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRawPosition), meth_QCaMotor_getRawPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getReadbackResolution), meth_QCaMotor_getReadbackResolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRevSpeed), meth_QCaMotor_getRevSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getSpmgMode), meth_QCaMotor_getSpmgMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getStep), meth_QCaMotor_getStep, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getStepsPerRev), meth_QCaMotor_getStepsPerRev, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getSuMode), meth_QCaMotor_getSuMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getUnits), meth_QCaMotor_getUnits, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getUnitsPerRev), meth_QCaMotor_getUnitsPerRev, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getUseEncoder), meth_QCaMotor_getUseEncoder, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getUseReadback), meth_QCaMotor_getUseReadback, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getUserGoal), meth_QCaMotor_getUserGoal, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getUserHiLimit), meth_QCaMotor_getUserHiLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getUserLoLimit), meth_QCaMotor_getUserLoLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getUserPosition), meth_QCaMotor_getUserPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_goDialPosition), meth_QCaMotor_goDialPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_goHome), meth_QCaMotor_goHome, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_goLimit), meth_QCaMotor_goLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_goRawPosition), meth_QCaMotor_goRawPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_goRelative), meth_QCaMotor_goRelative, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_goStep), meth_QCaMotor_goStep, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_goUserPosition), meth_QCaMotor_goUserPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isConnected), meth_QCaMotor_isConnected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isMoving), meth_QCaMotor_isMoving, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QCaMotor_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isWired), meth_QCaMotor_isWired, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_jog), meth_QCaMotor_jog, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_loadConfiguration), meth_QCaMotor_loadConfiguration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_printError), meth_QCaMotor_printError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QCaMotor_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_saveConfiguration), meth_QCaMotor_saveConfiguration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QCaMotor_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QCaMotor_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAcceleration), meth_QCaMotor_setAcceleration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBacklash), meth_QCaMotor_setBacklash, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBacklashAcceleration), meth_QCaMotor_setBacklashAcceleration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBacklashSpeed), meth_QCaMotor_setBacklashSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDeadBand), meth_QCaMotor_setDeadBand, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDescription), meth_QCaMotor_setDescription, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDialHiLimit), meth_QCaMotor_setDialHiLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDialLoLimit), meth_QCaMotor_setDialLoLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDialPosition), meth_QCaMotor_setDialPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDirection), meth_QCaMotor_setDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEncoderResolution), meth_QCaMotor_setEncoderResolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setJogAcceleration), meth_QCaMotor_setJogAcceleration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setJogSpeed), meth_QCaMotor_setJogSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMaximumSpeed), meth_QCaMotor_setMaximumSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMotorResolution), meth_QCaMotor_setMotorResolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNormalSpeed), meth_QCaMotor_setNormalSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOffset), meth_QCaMotor_setOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOffsetMode), meth_QCaMotor_setOffsetMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPower), meth_QCaMotor_setPower, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPrecision), meth_QCaMotor_setPrecision, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPv), meth_QCaMotor_setPv, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRawPosition), meth_QCaMotor_setRawPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setReadbackResolution), meth_QCaMotor_setReadbackResolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRevSpeed), meth_QCaMotor_setRevSpeed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSpmgMode), meth_QCaMotor_setSpmgMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStep), meth_QCaMotor_setStep, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStepsPerRev), meth_QCaMotor_setStepsPerRev, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSuMode), meth_QCaMotor_setSuMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUnits), meth_QCaMotor_setUnits, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUnitsPerRev), meth_QCaMotor_setUnitsPerRev, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUseEncoder), meth_QCaMotor_setUseEncoder, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUseReadback), meth_QCaMotor_setUseReadback, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUserHiLimit), meth_QCaMotor_setUserHiLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUserLoLimit), meth_QCaMotor_setUserLoLimit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUserPosition), meth_QCaMotor_setUserPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stop), meth_QCaMotor_stop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stopped), meth_QCaMotor_stopped, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QCaMotor_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_undoLastMotion), meth_QCaMotor_undoLastMotion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wait_start), meth_QCaMotor_wait_start, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wait_stop), meth_QCaMotor_wait_stop, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QCaMotor[] = {
    {sipName_ACCELERATED, static_cast<int>( ::QCaMotor::ACCELERATED), 2},
    {sipName_CONFIRMATION, static_cast<int>( ::QCaMotor::CONFIRMATION), 2},
    {sipName_FROZEN, static_cast<int>( ::QCaMotor::FROZEN), 3},
    {sipName_GO, static_cast<int>( ::QCaMotor::GO), 4},
    {sipName_IMMIDIATELY, static_cast<int>( ::QCaMotor::IMMIDIATELY), 2},
    {sipName_MOVE, static_cast<int>( ::QCaMotor::MOVE), 4},
    {sipName_NEGATIVE, static_cast<int>( ::QCaMotor::NEGATIVE), 1},
    {sipName_PAUSE, static_cast<int>( ::QCaMotor::PAUSE), 4},
    {sipName_POSITIVE, static_cast<int>( ::QCaMotor::POSITIVE), 1},
    {sipName_SET, static_cast<int>( ::QCaMotor::SET), 5},
    {sipName_STARTED, static_cast<int>( ::QCaMotor::STARTED), 2},
    {sipName_STOP, static_cast<int>( ::QCaMotor::STOP), 4},
    {sipName_STOPPED, static_cast<int>( ::QCaMotor::STOPPED), 2},
    {sipName_USE, static_cast<int>( ::QCaMotor::USE), 5},
    {sipName_VARIABLE, static_cast<int>( ::QCaMotor::VARIABLE), 3},
};


static pyqt5ClassPluginDef plugin_QCaMotor = {
    & ::QCaMotor::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_qcamotor_QCaMotor = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCaMotor,
        {0},
        &plugin_QCaMotor
    },
    {
        sipNameNr_QCaMotor,
        {0, 0, 1},
        152, methods_QCaMotor,
        15, enummembers_QCaMotor,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QCaMotor,
    0,
    init_type_QCaMotor,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCaMotor,
    0,
    0,
    0,
    release_QCaMotor,
    cast_QCaMotor,
    0,
    0,
    0,
    0,
    0,
    0
};
