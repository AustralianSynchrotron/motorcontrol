/*
 * Module code.
 *
 * Generated by SIP 4.19.16
 */

#include "sipAPIpyqcamotor.h"

#line 28 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 12 "./sippyqcamotorcmodule.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 15 "./sippyqcamotorcmodule.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 18 "./sippyqcamotorcmodule.cpp"
#line 247 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 21 "./sippyqcamotorcmodule.cpp"
#line 235 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 24 "./sippyqcamotorcmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_pyqcamotor[] = {
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'B', 'a', 'c', 'k', 'l', 'a', 's', 'h', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'R', 'e', 'a', 'd', 'b', 'a', 'c', 'k', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'E', 'n', 'c', 'o', 'd', 'e', 'r', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'B', 'a', 'c', 'k', 'l', 'a', 's', 'h', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'B', 'a', 'c', 'k', 'l', 'a', 's', 'h', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'P', 'o', 'w', 'e', 'r', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'J', 'o', 'g', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'M', 'o', 't', 'o', 'r', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'R', 'e', 'a', 'd', 'b', 'a', 'c', 'k', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'R', 'e', 'a', 'd', 'b', 'a', 'c', 'k', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'B', 'a', 'c', 'k', 'l', 'a', 's', 'h', 'S', 'p', 'e', 'e', 'd', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'L', 'o', 'L', 'i', 'm', 'i', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'H', 'i', 'L', 'i', 'm', 'i', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    's', 'e', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'r', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'r', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'Q', 'C', 'a', 'M', 'o', 't', 'o', 'r', ':', ':', 'M', 'o', 't', 'i', 'o', 'n', 'E', 'x', 'i', 't', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'S', 'p', 'e', 'e', 'd', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'D', 'i', 'a', 'l', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'U', 's', 'e', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'Q', 'C', 'a', 'M', 'o', 't', 'o', 'r', ':', ':', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'U', 's', 'e', 'R', 'e', 'a', 'd', 'b', 'a', 'c', 'k', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'N', 'o', 'r', 'm', 'a', 'l', 'S', 'p', 'e', 'e', 'd', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'S', 't', 'e', 'p', 's', 'P', 'e', 'r', 'R', 'e', 'v', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'U', 'n', 'i', 't', 's', 'P', 'e', 'r', 'R', 'e', 'v', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'D', 'i', 'a', 'l', 'H', 'i', 'L', 'i', 'm', 'i', 't', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'D', 'i', 'a', 'l', 'L', 'o', 'L', 'i', 'm', 'i', 't', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'U', 's', 'e', 'r', 'L', 'o', 'L', 'i', 'm', 'i', 't', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'U', 's', 'e', 'r', 'H', 'i', 'L', 'i', 'm', 'i', 't', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'R', 'a', 'w', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'J', 'o', 'g', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'M', 'o', 't', 'o', 'r', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'P', 'o', 'w', 'e', 'r', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'J', 'o', 'g', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'M', 'o', 't', 'o', 'r', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'Q', 'C', 'a', 'M', 'o', 't', 'o', 'r', ':', ':', 'S', 'p', 'm', 'g', 'M', 'o', 'd', 'e', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'U', 's', 'e', 'E', 'n', 'c', 'o', 'd', 'e', 'r', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'O', 'f', 'f', 's', 'e', 't', 'M', 'o', 'd', 'e', 0,
    'l', 'o', 'a', 'd', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    's', 'a', 'v', 'e', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'C', 'a', 'M', 'o', 't', 'o', 'r', ':', ':', 'O', 'f', 'f', 'M', 'o', 'd', 'e', 0,
    'i', 's', 'S', 'i', 'g', 'n', 'a', 'l', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    's', 'e', 'n', 'd', 'e', 'r', 'S', 'i', 'g', 'n', 'a', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'B', 'a', 'c', 'k', 'l', 'a', 's', 'h', 'S', 'p', 'e', 'e', 'd', 0,
    'g', 'e', 't', 'B', 'a', 'c', 'k', 'l', 'a', 's', 'h', 'S', 'p', 'e', 'e', 'd', 0,
    'g', 'e', 't', 'L', 'o', 'L', 'i', 'm', 'i', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    'g', 'e', 't', 'H', 'i', 'L', 'i', 'm', 'i', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    'Q', 'C', 'a', 'M', 'o', 't', 'o', 'r', ':', ':', 'S', 'u', 'M', 'o', 'd', 'e', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'S', 'p', 'm', 'g', 'M', 'o', 'd', 'e', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'B', 'a', 'c', 'k', 'l', 'a', 's', 'h', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'J', 'o', 'g', 'S', 'p', 'e', 'e', 'd', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'R', 'e', 'v', 'S', 'p', 'e', 'e', 'd', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'D', 'e', 'a', 'd', 'B', 'a', 'n', 'd', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'D', 'i', 'a', 'l', 'G', 'o', 'a', 'l', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'U', 's', 'e', 'r', 'G', 'o', 'a', 'l', 0,
    's', 'e', 't', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'S', 'p', 'e', 'e', 'd', 0,
    's', 'e', 't', 'D', 'i', 'a', 'l', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'S', 'p', 'e', 'e', 'd', 0,
    'g', 'e', 't', 'D', 'i', 'a', 'l', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'U', 's', 'e', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'R', 'a', 'w', 'G', 'o', 'a', 'l', 0,
    's', 'e', 't', 'U', 's', 'e', 'R', 'e', 'a', 'd', 'b', 'a', 'c', 'k', 0,
    's', 'e', 't', 'N', 'o', 'r', 'm', 'a', 'l', 'S', 'p', 'e', 'e', 'd', 0,
    's', 'e', 't', 'S', 't', 'e', 'p', 's', 'P', 'e', 'r', 'R', 'e', 'v', 0,
    's', 'e', 't', 'U', 'n', 'i', 't', 's', 'P', 'e', 'r', 'R', 'e', 'v', 0,
    's', 'e', 't', 'D', 'i', 'a', 'l', 'L', 'o', 'L', 'i', 'm', 'i', 't', 0,
    's', 'e', 't', 'D', 'i', 'a', 'l', 'H', 'i', 'L', 'i', 'm', 'i', 't', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'L', 'o', 'L', 'i', 'm', 'i', 't', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'H', 'i', 'L', 'i', 'm', 'i', 't', 0,
    'u', 'n', 'd', 'o', 'L', 'a', 's', 't', 'M', 'o', 't', 'i', 'o', 'n', 0,
    'g', 'o', 'D', 'i', 'a', 'l', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'g', 'o', 'U', 's', 'e', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'R', 'a', 'w', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'U', 's', 'e', 'R', 'e', 'a', 'd', 'b', 'a', 'c', 'k', 0,
    'g', 'e', 't', 'N', 'o', 'r', 'm', 'a', 'l', 'S', 'p', 'e', 'e', 'd', 0,
    'g', 'e', 't', 'S', 't', 'e', 'p', 's', 'P', 'e', 'r', 'R', 'e', 'v', 0,
    'g', 'e', 't', 'U', 'n', 'i', 't', 's', 'P', 'e', 'r', 'R', 'e', 'v', 0,
    'g', 'e', 't', 'D', 'i', 'a', 'l', 'H', 'i', 'L', 'i', 'm', 'i', 't', 0,
    'g', 'e', 't', 'D', 'i', 'a', 'l', 'L', 'o', 'L', 'i', 'm', 'i', 't', 0,
    'g', 'e', 't', 'U', 's', 'e', 'r', 'L', 'o', 'L', 'i', 'm', 'i', 't', 0,
    'g', 'e', 't', 'U', 's', 'e', 'r', 'H', 'i', 'L', 'i', 'm', 'i', 't', 0,
    'g', 'e', 't', 'L', 'i', 'm', 'i', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    'g', 'e', 't', 'R', 'a', 'w', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'M', 'o', 'v', 'i', 'n', 'g', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'S', 'u', 'M', 'o', 'd', 'e', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'O', 'f', 'f', 's', 'e', 't', 0,
    's', 'e', 't', 'U', 's', 'e', 'E', 'n', 'c', 'o', 'd', 'e', 'r', 0,
    's', 'e', 't', 'O', 'f', 'f', 's', 'e', 't', 'M', 'o', 'd', 'e', 0,
    'g', 'o', 'R', 'a', 'w', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'U', 's', 'e', 'E', 'n', 'c', 'o', 'd', 'e', 'r', 0,
    'g', 'e', 't', 'O', 'f', 'f', 's', 'e', 't', 'M', 'o', 'd', 'e', 0,
    'g', 'e', 't', 'L', 'a', 's', 't', 'M', 'o', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'W', 'i', 'r', 'e', 'd', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'P', 'o', 'w', 'e', 'r', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'U', 'n', 'i', 't', 's', 0,
    's', 'e', 't', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'C', 'O', 'N', 'F', 'I', 'R', 'M', 'A', 'T', 'I', 'O', 'N', 0,
    's', 'e', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'S', 't', 'e', 'p', 0,
    's', 'e', 't', 'S', 'p', 'm', 'g', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'B', 'a', 'c', 'k', 'l', 'a', 's', 'h', 0,
    's', 'e', 't', 'J', 'o', 'g', 'S', 'p', 'e', 'e', 'd', 0,
    's', 'e', 't', 'R', 'e', 'v', 'S', 'p', 'e', 'e', 'd', 0,
    's', 'e', 't', 'D', 'e', 'a', 'd', 'B', 'a', 'n', 'd', 0,
    'g', 'e', 't', 'S', 'p', 'm', 'g', 'M', 'o', 'd', 'e', 0,
    'g', 'e', 't', 'B', 'a', 'c', 'k', 'l', 'a', 's', 'h', 0,
    'i', 's', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    'g', 'e', 't', 'J', 'o', 'g', 'S', 'p', 'e', 'e', 'd', 0,
    'g', 'e', 't', 'R', 'e', 'v', 'S', 'p', 'e', 'e', 'd', 0,
    'g', 'e', 't', 'D', 'e', 'a', 'd', 'B', 'a', 'n', 'd', 0,
    'g', 'e', 't', 'D', 'i', 'a', 'l', 'G', 'o', 'a', 'l', 0,
    'g', 'e', 't', 'U', 's', 'e', 'r', 'G', 'o', 'a', 'l', 0,
    'A', 'C', 'C', 'E', 'L', 'E', 'R', 'A', 'T', 'E', 'D', 0,
    'I', 'M', 'M', 'I', 'D', 'I', 'A', 'T', 'E', 'L', 'Y', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'p', 'r', 'i', 'n', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'g', 'o', 'R', 'e', 'l', 'a', 't', 'i', 'v', 'e', 0,
    'g', 'e', 't', 'R', 'a', 'w', 'G', 'o', 'a', 'l', 0,
    'w', 'a', 'i', 't', '_', 's', 't', 'a', 'r', 't', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'p', 'y', 'q', 'c', 'a', 'm', 'o', 't', 'o', 'r', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'P', 'v', 0,
    's', 'e', 't', 'S', 'u', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'O', 'f', 'f', 's', 'e', 't', 0,
    'g', 'e', 't', 'S', 'u', 'M', 'o', 'd', 'e', 0,
    'g', 'e', 't', 'O', 'f', 'f', 's', 'e', 't', 0,
    'w', 'a', 'i', 't', '_', 's', 't', 'o', 'p', 0,
    'r', 'e', 'c', 'e', 'i', 'v', 'e', 'r', 's', 0,
    's', 'e', 't', 'P', 'o', 'w', 'e', 'r', 0,
    's', 'e', 't', 'U', 'n', 'i', 't', 's', 0,
    'g', 'e', 't', 'P', 'o', 'w', 'e', 'r', 0,
    'i', 's', 'M', 'o', 'v', 'i', 'n', 'g', 0,
    'g', 'e', 't', 'U', 'n', 'i', 't', 's', 0,
    'N', 'E', 'G', 'A', 'T', 'I', 'V', 'E', 0,
    'P', 'O', 'S', 'I', 'T', 'I', 'V', 'E', 0,
    'V', 'A', 'R', 'I', 'A', 'B', 'L', 'E', 0,
    'Q', 'C', 'a', 'M', 'o', 't', 'o', 'r', 0,
    's', 'e', 't', 'S', 't', 'e', 'p', 0,
    'g', 'o', 'L', 'i', 'm', 'i', 't', 0,
    'i', 's', 'W', 'i', 'r', 'e', 'd', 0,
    'g', 'e', 't', 'S', 't', 'e', 'p', 0,
    'S', 'T', 'O', 'P', 'P', 'E', 'D', 0,
    'S', 'T', 'A', 'R', 'T', 'E', 'D', 0,
    's', 't', 'o', 'p', 'p', 'e', 'd', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'g', 'o', 'H', 'o', 'm', 'e', 0,
    'g', 'o', 'S', 't', 'e', 'p', 0,
    'F', 'R', 'O', 'Z', 'E', 'N', 0,
    's', 'e', 'n', 'd', 'e', 'r', 0,
    'o', 'b', 'j', 'e', 'c', 't', 0,
    's', 'e', 't', 'P', 'v', 0,
    'g', 'e', 't', 'P', 'v', 0,
    'P', 'A', 'U', 'S', 'E', 0,
    'e', 'r', 'r', 'o', 'r', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'M', 'O', 'V', 'E', 0,
    'S', 'T', 'O', 'P', 0,
    'j', 'o', 'g', 0,
    'g', 'e', 't', 0,
    'S', 'E', 'T', 0,
    'G', 'O', 0,
};

bool sipVH_pyqcamotor_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_pyqcamotor_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0, ::QEvent*a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", a0, sipType_QObject, SIP_NULLPTR, a1, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_pyqcamotor_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTimerEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTimerEvent, SIP_NULLPTR);
}

void sipVH_pyqcamotor_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QChildEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QChildEvent, SIP_NULLPTR);
}

void sipVH_pyqcamotor_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);
}

void sipVH_pyqcamotor_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QMetaMethod& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QMetaMethod(a0), sipType_QMetaMethod, SIP_NULLPTR);
}
static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCaMotor__MotionExit, {0}, 0}, sipNameNr_MotionExit, 0, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCaMotor__Direction, {0}, 0}, sipNameNr_Direction, 0, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCaMotor__OffMode, {0}, 0}, sipNameNr_OffMode, 0, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCaMotor__SuMode, {0}, 0}, sipNameNr_SuMode, 0, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCaMotor__SpmgMode, {0}, 0}, sipNameNr_SpmgMode, 0, SIP_NULLPTR},
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes_pyqcamotor[] = {
    &sipTypeDef_pyqcamotor_QCaMotor.ctd_base,
    &enumTypes[1].etd_base,
    &enumTypes[0].etd_base,
    &enumTypes[2].etd_base,
    &enumTypes[4].etd_base,
    &enumTypes[3].etd_base,
};


/* This defines the types that this module needs to import from QtCore. */
sipImportedTypeDef sipImportedTypes_pyqcamotor_QtCore[] = {
    {"QChildEvent"},
    {"QEvent"},
    {"QMetaMethod"},
    {"QObject"},
    {"QString"},
    {"QTimerEvent"},
    {SIP_NULLPTR}
};


/*
 * This defines the virtual error handlers that this module needs to import
 * from QtCore.
 */
sipImportedVirtErrorHandlerDef sipImportedVirtErrorHandlers_pyqcamotor_QtCore[] = {
    {"PyQt5"},
    {SIP_NULLPTR}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt5.QtCore", sipImportedTypes_pyqcamotor_QtCore, sipImportedVirtErrorHandlers_pyqcamotor_QtCore, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_pyqcamotor = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_pyqcamotor,
    0,
    sipStrings_pyqcamotor,
    importsTable,
    SIP_NULLPTR,
    6,
    sipExportedTypes_pyqcamotor,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_pyqcamotor;

sip_qt_metaobject_func sip_pyqcamotor_qt_metaobject;
sip_qt_metacall_func sip_pyqcamotor_qt_metacall;
sip_qt_metacast_func sip_pyqcamotor_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_pyqcamotor
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initpyqcamotor
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "pyqcamotor",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_pyqcamotor, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_pyqcamotor), sip_methods);
#endif

    if (sipModule == SIP_NULLPTR)
        SIP_MODULE_RETURN(SIP_NULLPTR);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("sip"));
#endif

    if (sip_sipmod == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == SIP_NULLPTR || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == SIP_NULLPTR || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_pyqcamotor = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "sip._C_API"));
#else
    sipAPI_pyqcamotor = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_pyqcamotor == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_pyqcamotor,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_pyqcamotor_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_pyqcamotor_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_pyqcamotor_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_pyqcamotor_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_pyqcamotor,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    SIP_MODULE_RETURN(sipModule);
}
